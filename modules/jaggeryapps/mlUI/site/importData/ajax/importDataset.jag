<%
    var log = new Log();
    var mlConfigs=require("/includes/ml.json");
    var carbon = require('carbon');
    var datasetID = session.get("datasetId");
    var workflowId = session.get("workflowId");
    try{
        var mlDatasetService = carbon.server.osgiService('org.wso2.carbon.ml.dataset.DatasetService');
        var start = parseInt(request.getParameter("iDisplayStart"));
        var length = parseInt(request.getParameter("iDisplayLength"));

        if (datasetID != null){
            var features = mlDatasetService.getFeatures(datasetID, workflowId, start, length);
            var json = {};
            json['sEcho'] = request.getParameter("sEcho");
            json['iTotalRecords'] = session.get("numOfFeatures");
            json['iTotalDisplayRecords'] = session.get("numOfFeatures");

            var pageContentAsJson = [];
            for (var i=0; i<features.size(); i++) {
                var feature = features.get(i);
     
                var featureAsJson = [];

                featureAsJson.push('<span class="feature">' + feature.getFieldName()
                    + '</span>');
                featureAsJson.push(checkboxRenderer(feature.isInput()));
                featureAsJson.push(listSelectionRenderer(mlConfigs.featureTypes, feature.getType().toString(),"fieldType"));
                featureAsJson.push('<div class="summaryStatistics">' + feature.getSummaryStats() + "</div>");
                featureAsJson.push(listSelectionRenderer(mlConfigs.imputeOptions, feature.getImputeOperation().toString(), "imputeMethod"));
                pageContentAsJson.push(featureAsJson);
            }
            response.contentType = "application/json; charset=utf-8";
            response.characterEncoding = 'UTF-8';
            json['aaData'] = pageContentAsJson;
            print(json);
        }
    } catch(e) {
        log.error('An error occured while importing the dataset: ' + datasetID + ' of user ' + session.get('logged.user'), e);
    }

    function checkboxRenderer(value) {
        var checkboxControl = '<input type="checkbox"' + 'class="includeFeature" value="includeFeature"';
        if (value) {      
           checkboxControl = checkboxControl + "checked />";
        } else {
              checkboxControl = checkboxControl + "/>";
        }
          return checkboxControl;
    }; 

    function listSelectionRenderer(list, selectedOption, cssClass) {
        var selection = "<select class=" + cssClass + ">";
        for (var item in list){
            if (selectedOption.toUpperCase() == list[item].toUpperCase()) {
                selection = selection + "<option selected value=\"" + list[item] + "\">" + list[item] + "</option>";
            } else {
                selection = selection + "<option value=\"" + list[item] + "\">" + list[item] + "</option>";
            }
        }
        selection = selection + "</select>";
        return selection;
    }
%>



