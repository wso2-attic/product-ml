<!--
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->

<%
var log = new Log();
if (request.getParameter("interpretability") != undefined && request.getParameter('datasetSize') != undefined && request.getParameter('textual') != undefined) {
    session.put('interpretability', request.getParameter('interpretability'));
    session.put('datasetSize', request.getParameter('datasetSize'));
    session.put('textual', request.getParameter('textual'));
    session.put('binary', request.getParameter('binary'));
}
%>

<div class='algorithms'>
    <h3>Recommended Algorithms</h3>
    <form id='recomendedAlgoForm' action='#' method='post' enctype='multipart/form-data'>
<%
try {
    var carbon = require('carbon');
    var modelService = carbon.server.osgiService('org.wso2.carbon.ml.model.ModelService');
    var algorithmType = session.get("algoType");
    var HashMap = java.util.HashMap;
    var userResponse = new HashMap();
    userResponse.put("interpretability", session.get("interpretability"));
    userResponse.put("datasetSize", session.get("datasetSize"));
    userResponse.put("binary", session.get("binary"));
    userResponse.put("textual", session.get("textual"));
    var recommendedAlgorithms = modelService.getRecommendedAlgorithms(algorithmType, userResponse);
    var iterator = recommendedAlgorithms.entrySet().iterator();
    while (iterator.hasNext()) {
        var pair = iterator.next();
        print('<input type="radio" class="algoName" name="algorithm" value="' + pair.getKey() + '">' + pair.getKey() + ' (' + pair.getValue() + ')<br>');
    }
} catch (e) {
    log.error('An error occured while retrieving recommended algorithms of type: ' + algoType, e);
    throw new Error('An error occured while retrieving recommended algorithms of type: ' + algoType);
}
%>
</form>
<br>
<div class='algoSelectionErrorMessage'>*Please select an algorithm before continue.</div>
</div>

<div id='hyperParameters'> </div>

<div style="clear:both"></div>
<div class="bottomNavigationButtons">
<button id='recommendedAlgosBackButton' class='blueButton'>Go Back</button>
<button id='algorithmsContinueButton' class='blueButton'>Continue</button>
<div>
<script src='./js/buildModel.js'></script> 
